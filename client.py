import time

import nacl.signing
import nacl.encoding
import nacl.secret
import nacl.utils
import socket

from nacl.exceptions import BadSignatureError
from nacl.public import Box

from socket_protocol import send_message, receive_message, generate_signing_keys, generate_keys


class Client(object):
    _secret_box = None
    _server_verify_key = None

    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        self.signing_key, self.verify_key, self.verify_key_hex = generate_signing_keys()

    def connect_to_host(self, host, port):
        self.socket.connect((host, port))
        print('Client: Server connection established.')

        # Send our verification hex
        send_message(self.socket, self.verify_key_hex)

        # Receive the server's verification hex
        server_key_hex = receive_message(self.socket)
        if not server_key_hex:
            return
        self._server_verify_key = nacl.signing.VerifyKey(server_key_hex, encoder=nacl.encoding.HexEncoder)

    def setup_secure_channel(self):
        # Generate our private / public key pair
        private_key, public_key = generate_keys()
        public_key = public_key.encode(encoder=nacl.encoding.HexEncoder)
        print('Client: Keys generated.')

        # Send our public key to the server
        send_message(self.socket, self._sign_data(public_key))
        print('Client: Public key sent.')

        # Receive the server's public key
        server_public_key = receive_message(self.socket)
        server_public_key = self._verify_sender(server_public_key)
        if not server_public_key:
            return
        server_public_key = nacl.public.PublicKey(server_public_key, encoder=nacl.encoding.HexEncoder)
        print('Client: Server public key received.')

        # Receive the secret key generated by the server
        box = Box(private_key, server_public_key)
        secret_key = receive_message(self.socket)
        secret_key = self._verify_sender(secret_key)
        if not secret_key:
            return
        print('Client: Secret key received.')

        # Setup symmetric encryption using the secret key
        secret_key = box.decrypt(secret_key)
        self._secret_box = nacl.secret.SecretBox(secret_key)

    def send_data(self, data):
        encrypted = self._encrypt_data(data)
        if not encrypted:
            return
        signed = self._sign_data(encrypted)
        send_message(socket, signed)

    def receive_data(self):
        # TODO: Receive file data and hashes
        pass

    def _sign_data(self, data):
        signed = self.signing_key.sign(data)
        return signed

    def _verify_sender(self, data):
        try:
            return self._server_verify_key.verify(data)
        except BadSignatureError:
            return None

    def _encrypt_data(self, data):
        encrypted = self._secret_box.encrypt(data)
        if len(encrypted) != len(data) + self._secret_box.NONCE_SIZE + self._secret_box.MACBYTES:
            return None
        return encrypted

    def _decrypt_data(self, data):
        plaintext = self._secret_box.decrypt(data)
        return plaintext


client = Client()
client.connect_to_host('127.0.0.1', 12317)
time.sleep(0.5)
client.setup_secure_channel()
